[{"path":"https://molonc.github.io/dlptools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 dlptools authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://molonc.github.io/dlptools/articles/heatmaps.html","id":"plotting-trees-and-heatmaps","dir":"Articles","previous_headings":"","what":"Plotting Trees and Heatmaps","title":"Flexible Heatmaps","text":"DLP data commonly vizualized heatmap copy number states across genome. Next heatmap, often want add: phylogenetic trees cellular relationships annotations sample, experiments clonal identities labels colors tree package Signals great functions (lots useful functions DLP single cell analyses). Alternatively, package dlptools::plot_state_hm(), similar things Signals package, conveniences. dlptools::plot_state_hm() meant one stop shop heatmap plotting many variable types options. ?dlptools::plot_state_hm() show options, ’ll walk throuh examples. main constraint column called cell_id contains cell labels. ’ll work example data (trimmed output signals, just DLP reads output works fine ):","code":"dlptools::plot_state_hm(   # long format bin level data   states_df,   # column of data to plot   state_col,   # optional, tree with tip labels matching the cell_id column   phylogeny = NULL,   # for direct saving to a file   file_name = NULL,   # optional dataframe of a cell_id column + any cell level information columns   anno_df = NULL,   # for custom colors of annotations, see ?plot_state for examples   anno_colors_list = list(),   # can call out the annotation columns from the original dataframe   # instead of a separate frame.   anno_columns = NULL,   # optional, can also specify columns in the dataframe   clones_df = NULL,   # column name to pull clone IDs from instead of separate DF.   clone_column = NULL,   # bool, color the tree with clone colors   color_tree_clones = FALSE,   # bool, only letter label the largest group of any given clone   only_largest_clone_group = FALSE,   # font size of labels on heatmap image   labels_fontsize = 8,   # set to TRUE if plotting continuous values on the heatmap.   continuous_hm_colours = FALSE,   # specificiation of color range for continuous values   custom_continuous_colors = NULL,   # specification of values for ends of continous range.   custom_continuous_range = NULL ) ex_state_dat <- vroom::vroom(\"data/ex_state_dat.tsv.gz\")  head(ex_state_dat) #> # A tibble: 6 × 11 #>   cell_id sample_id passage   chr  start    end state   BAF state_AS state_phase #>   <chr>   <chr>     <chr>   <dbl>  <dbl>  <dbl> <dbl> <dbl> <chr>    <chr>       #> 1 AT2399… AT23998   p1          1 2.00e6 2.5 e6     4 0.179 3|1      A-Gained    #> 2 AT2399… AT23998   p1          1 3.00e6 3.5 e6     4 0.294 3|1      A-Gained    #> 3 AT2399… AT23998   p1          1 4.00e6 4.50e6     4 0.211 3|1      A-Gained    #> 4 AT2399… AT23998   p1          1 4.50e6 5   e6     5 0.299 5        A-Gained    #> 5 AT2399… AT23998   p1          1 5.00e6 5.50e6     5 0.182 5        A-Gained    #> 6 AT2399… AT23998   p1          1 5.50e6 6   e6     5 0.129 5        A-Gained    #> # ℹ 1 more variable: copy <dbl>"},{"path":"https://molonc.github.io/dlptools/articles/heatmaps.html","id":"basic-heatmap","dir":"Articles","previous_headings":"Plotting Trees and Heatmaps","what":"basic heatmap","title":"Flexible Heatmaps","text":"different column:  Column options include: state state_phase (-gained, B-hom, etc) B BAF state_AS state_AS_phased (might many states usefully visualize) pretty much custom column want plot reasonably similar.","code":"dlptools::plot_state_hm(   states_df = ex_state_dat,   state_col = \"state\",   # optional, but recommended dump direct to a file with:   file_name = \"imgs/basic_hm.png\"   # recommended for full, large, heatmaps ) dlptools::plot_state_hm(   states_df = ex_state_dat,   state_col = \"state_phase\",   # optional, but recommended dump direct to a file with:   file_name = \"imgs/basic_phase_hm.png\"   # recommended for full, large, heatmaps )"},{"path":"https://molonc.github.io/dlptools/articles/heatmaps.html","id":"adding-a-tree","dir":"Articles","previous_headings":"Plotting Trees and Heatmaps","what":"Adding a Tree","title":"Flexible Heatmaps","text":"","code":"ex_tree <- ape::read.tree(\"data/pkg_tree.newick\")  dlptools::plot_state_hm(   states_df = ex_state_dat,   state_col = \"state\",   phylogeny = ex_tree,   file_name = \"imgs/with_tree_hm.png\" )"},{"path":"https://molonc.github.io/dlptools/articles/heatmaps.html","id":"adding-annotation-data","dir":"Articles","previous_headings":"Plotting Trees and Heatmaps","what":"Adding Annotation Data","title":"Flexible Heatmaps","text":"can come separate data frame annotations per cell ID, can point columns state dataframe:  pre-made annotation dataframe created cell id:  either , can add tree phylogeny arguments.","code":"dlptools::plot_state_hm(   states_df = dplyr::mutate(ex_state_dat, passage = as.factor(passage)),   state_col = \"state\",   file_name = \"imgs/annotations_hm.png\",   anno_columns = c(\"sample_id\", \"passage\"),   # you could control the colors of your annotations with:   # anno_colors_list = list(passage=c(`1`='#2872bc', `19`='#d23e3e')), ) anno_df <- dplyr::distinct(ex_state_dat, cell_id, sample_id, passage)   dlptools::plot_state_hm(   states_df = ex_state_dat,   state_col = \"state\",   anno_df = anno_df,   file_name = \"imgs/annotations_2_hm.png\" )"},{"path":"https://molonc.github.io/dlptools/articles/heatmaps.html","id":"clone-information","dir":"Articles","previous_headings":"Plotting Trees and Heatmaps","what":"Clone Information","title":"Flexible Heatmaps","text":"Clones work similar annotations, can either supply data frame cell_id clone_id columns, just pull information states dataframe:","code":"# fake some clone data ex_state_dat <- ex_state_dat |>   dplyr::mutate(     clone = dplyr::if_else(passage == \"p1\", \"A\", \"B\"),   )   dlptools::plot_state_hm(   states_df = ex_state_dat,   state_col = \"state_phase\",   file_name = \"imgs/with_clones.png\",   clone_column = \"clone\",   # optional, don't have to have annotations, or could pass the dataframe like   # above   anno_columns = c(\"sample_id\", \"passage\"),   # optional, don't have to have tree   phylogeny = ex_tree,   # optional, turns on tree coloring by clone   color_tree_clones = TRUE,   # optional, only largest cell group of a clone gets a letter label.   only_largest_clone_group = TRUE )"},{"path":"https://molonc.github.io/dlptools/articles/heatmaps.html","id":"continous-variables","dir":"Articles","previous_headings":"Plotting Trees and Heatmaps","what":"Continous Variables","title":"Flexible Heatmaps","text":"","code":"dlptools::plot_state_hm(   states_df = ex_state_dat,   state_col = \"copy\",   continuous_hm_colours = TRUE,   # optional, can specify the colors   # custom_continuous_colors = c(\"#000000\", \"#ffffff\", \"#5F9EA0\")   # optional, can specify values to fill out low, mid, high end of range   # basically has the effect of squishing or stretching the color scale   # custom_continuous_range = c(0, 2, 10)   file_name = \"imgs/continuous.png\" )  # and all of this can be specified with annotations, trees, etc. # as above."},{"path":"https://molonc.github.io/dlptools/articles/heatmaps.html","id":"errors","dir":"Articles","previous_headings":"Plotting Trees and Heatmaps","what":"Errors","title":"Flexible Heatmaps","text":"see error like : ’s complaint ggtree need fix haven’t yet. Loading ggtree fix :","code":"Error in `fortify()`: ! `data` must be a <data.frame>, or an object coercible by `fortify()`, or a valid <data.frame>-like object coercible by `as.data.frame()`. Caused by error in `.prevalidate_data_frame_like_object()`: ! `dim(data)` must return an <integer> of length 2. library(ggtree)"},{"path":"https://molonc.github.io/dlptools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ben Furman. Author, maintainer.","code":""},{"path":"https://molonc.github.io/dlptools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Furman B (2024). dlptools: DLPTools: Handling DLP+ Data. R package version 0.2.0, https://molonc.github.io/dlptools/.","code":"@Manual{,   title = {dlptools: DLPTools: Handling DLP+ Data},   author = {Ben Furman},   year = {2024},   note = {R package version 0.2.0},   url = {https://molonc.github.io/dlptools/}, }"},{"path":"https://molonc.github.io/dlptools/index.html","id":"dlptools","dir":"","previous_headings":"","what":"DLPTools: Handling DLP+ Data","title":"DLPTools: Handling DLP+ Data","text":"R package basic DLP+ data manipulation plotting. Basically just collection various functions using handle DLP data.","code":""},{"path":"https://molonc.github.io/dlptools/index.html","id":"installing-dlptools","dir":"","previous_headings":"","what":"Installing DLPtools","title":"DLPTools: Handling DLP+ Data","text":"","code":"library(devtools) devtools::install_github(\"molonc/dlptools\")"},{"path":"https://molonc.github.io/dlptools/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"DLPTools: Handling DLP+ Data","text":"See vignettes/ various overview (Rmd & htmls available) browse articles package website.","code":""},{"path":"https://molonc.github.io/dlptools/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"DLPTools: Handling DLP+ Data","text":"haven’t worked R package , good read get started. add functions, can rely library(devtools) help metadata stuff package construction. Steps include: boot R instance set working directory wherever cloned repo add R function either within existing R/*R module, create new module test function, R instance can load check R instance, can build needed meta data new function. function includes code another R package (even base R), need declare add package metadata (unless ’s already listed Imports: section DESCRIPTION file). R instance: R instance, run check package still good ideally write unit tests 😬 https://r-pkgs.org/whole-game.html#use_testthat commit changes repo","code":"# 1. clone the repo  git clone URL  # 2. install the pre-commit hooks pre-commit install  # 3. code happy. setwd(\"/path/to/dlptools/\") library(devtools) vim R/my_new_module.R # add your function, with documentation in roxygen style! See other funcs for  # examples.  #' the thing my function does #' # my function does this great thing #'  #' @param x a description of the arg for my function #' @export my_cool_func <- function(x) {     return(x) }  # also, try and use namespaces for functions that come from other packages,  # e.g., purrr::map() instead of just map(), or dplyr::select() instead of just select() # leads to fewer mixups as code bases grow and encounter redundantly named functions. # will load the whole package including your new function devtools::load_all()  my_cool_func(x) # searches the R/ directory for new functions and updates the NAMESPACE file. # also creates .Rd files based on your function docstring. devtools::document() usethis::use_package(\"purrr\") # or whatever package your function needs devtools::check() git status # to see what is all changed  git add R/my_new_module.R # and probably the other files that the package updated git add NAMESPACE git add man/my_cool_func.R git commit # and battle it out with the pre-commit hooks...the R ones are painfully slow  # write a GOOD commit message. For inspiration look at other commits and  # checkout https://cbea.ms/git-commit/ # also try to include the type of thing being committed, i.e., # conventional commits style: https://www.conventionalcommits.org/en/v1.0.0/"},{"path":"https://molonc.github.io/dlptools/reference/ASCN_COLORS.html","id":null,"dir":"Reference","previous_headings":"","what":"colors for signals results of allele balances — ASCN_COLORS","title":"colors for signals results of allele balances — ASCN_COLORS","text":"colors signals results allele balances","code":""},{"path":"https://molonc.github.io/dlptools/reference/ASCN_COLORS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"colors for signals results of allele balances — ASCN_COLORS","text":"","code":"ASCN_COLORS"},{"path":"https://molonc.github.io/dlptools/reference/ASCN_COLORS.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"colors for signals results of allele balances — ASCN_COLORS","text":"object class character length 17.","code":""},{"path":"https://molonc.github.io/dlptools/reference/ASCN_PHASE_COLORS.html","id":null,"dir":"Reference","previous_headings":"","what":"ASCN phase colors — ASCN_PHASE_COLORS","title":"ASCN phase colors — ASCN_PHASE_COLORS","text":"ASCN phase colors","code":""},{"path":"https://molonc.github.io/dlptools/reference/ASCN_PHASE_COLORS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ASCN phase colors — ASCN_PHASE_COLORS","text":"","code":"ASCN_PHASE_COLORS"},{"path":"https://molonc.github.io/dlptools/reference/ASCN_PHASE_COLORS.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ASCN phase colors — ASCN_PHASE_COLORS","text":"object class character length 5.","code":""},{"path":"https://molonc.github.io/dlptools/reference/CNV_COLOURS.html","id":null,"dir":"Reference","previous_headings":"","what":"standard colors used in dlp plots — CNV_COLOURS","title":"standard colors used in dlp plots — CNV_COLOURS","text":"standard colors used dlp plots","code":""},{"path":"https://molonc.github.io/dlptools/reference/CNV_COLOURS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"standard colors used in dlp plots — CNV_COLOURS","text":"","code":"CNV_COLOURS"},{"path":"https://molonc.github.io/dlptools/reference/CNV_COLOURS.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"standard colors used in dlp plots — CNV_COLOURS","text":"object class character length 13.","code":""},{"path":"https://molonc.github.io/dlptools/reference/DEFAULT_CONTINUOUS_COLOR_RANGE.html","id":null,"dir":"Reference","previous_headings":"","what":"min, median, max for a continuous color range — DEFAULT_CONTINUOUS_COLOR_RANGE","title":"min, median, max for a continuous color range — DEFAULT_CONTINUOUS_COLOR_RANGE","text":"min, median, max continuous color range","code":""},{"path":"https://molonc.github.io/dlptools/reference/DEFAULT_CONTINUOUS_COLOR_RANGE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"min, median, max for a continuous color range — DEFAULT_CONTINUOUS_COLOR_RANGE","text":"","code":"DEFAULT_CONTINUOUS_COLOR_RANGE"},{"path":"https://molonc.github.io/dlptools/reference/DEFAULT_CONTINUOUS_COLOR_RANGE.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"min, median, max for a continuous color range — DEFAULT_CONTINUOUS_COLOR_RANGE","text":"object class character length 3.","code":""},{"path":"https://molonc.github.io/dlptools/reference/STATE_COLORS.html","id":null,"dir":"Reference","previous_headings":"","what":"alias of standard colors used in dlp plots — STATE_COLORS","title":"alias of standard colors used in dlp plots — STATE_COLORS","text":"alias standard colors used dlp plots","code":""},{"path":"https://molonc.github.io/dlptools/reference/STATE_COLORS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"alias of standard colors used in dlp plots — STATE_COLORS","text":"","code":"STATE_COLORS"},{"path":"https://molonc.github.io/dlptools/reference/STATE_COLORS.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"alias of standard colors used in dlp plots — STATE_COLORS","text":"object class character length 13.","code":""},{"path":"https://molonc.github.io/dlptools/reference/basic_tile_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"create a tile plot of read state calls. — basic_tile_plot","title":"create a tile plot of read state calls. — basic_tile_plot","text":"builds basic ggplot geom_tile reads df. expects columns cell_id, start, state, chr","code":""},{"path":"https://molonc.github.io/dlptools/reference/basic_tile_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a tile plot of read state calls. — basic_tile_plot","text":"","code":"basic_tile_plot(reads_df)"},{"path":"https://molonc.github.io/dlptools/reference/basic_tile_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a tile plot of read state calls. — basic_tile_plot","text":"reads_df table reads data (e.g., load import_dlp_files())","code":""},{"path":"https://molonc.github.io/dlptools/reference/basic_tile_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a tile plot of read state calls. — basic_tile_plot","text":"ggplot object","code":""},{"path":"https://molonc.github.io/dlptools/reference/bme_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"picks beginning, middle, and end of a vector to handle when vectors that are too long are passed — bme_vec","title":"picks beginning, middle, and end of a vector to handle when vectors that are too long are passed — bme_vec","text":"picks beginning, middle, end vector handle vectors long passed","code":""},{"path":"https://molonc.github.io/dlptools/reference/bme_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"picks beginning, middle, and end of a vector to handle when vectors that are too long are passed — bme_vec","text":"","code":"bme_vec(vec, vec_name)"},{"path":"https://molonc.github.io/dlptools/reference/build_left_annot.html","id":null,"dir":"Reference","previous_headings":"","what":"builds the left-side annotations of the cells — build_left_annot","title":"builds the left-side annotations of the cells — build_left_annot","text":"builds left-side annotations cells","code":""},{"path":"https://molonc.github.io/dlptools/reference/build_left_annot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"builds the left-side annotations of the cells — build_left_annot","text":"","code":"build_left_annot(   anno_df = NULL,   anno_cols_list = list(),   clones_df = NULL,   only_largest_clone_group = FALSE,   labels_fontsize = 8,   clone_palette = NULL )"},{"path":"https://molonc.github.io/dlptools/reference/build_left_annot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"builds the left-side annotations of the cells — build_left_annot","text":"anno_df annotations dataframe cell_id column annotation cell id added heatmap. anno_cols_list list named vectors specifying colors annotations example: list(passage=c(1='#2872bc', 19='#d23e3e')) clones_df dataframe clone ideas (clone_id) cell_id. columns required. labels_fontsize large make text labels clone_palette named vector colors give clones. E.g., c( ='#12345', B='#67890'). See make_clone_palette()","code":""},{"path":"https://molonc.github.io/dlptools/reference/cell_id_order_as_plotted.html","id":null,"dir":"Reference","previous_headings":"","what":"grab cell ids in the order that they are plotted — cell_id_order_as_plotted","title":"grab cell ids in the order that they are plotted — cell_id_order_as_plotted","text":"align state calls things. make ggplot tree heatmap code , pull cell ID order plotted","code":""},{"path":"https://molonc.github.io/dlptools/reference/cell_id_order_as_plotted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"grab cell ids in the order that they are plotted — cell_id_order_as_plotted","text":"","code":"cell_id_order_as_plotted(phylo_tree)"},{"path":"https://molonc.github.io/dlptools/reference/cell_id_order_as_plotted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"grab cell ids in the order that they are plotted — cell_id_order_as_plotted","text":"phylo_tree phylo object tree used heatmap","code":""},{"path":"https://molonc.github.io/dlptools/reference/cell_id_order_as_plotted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"grab cell ids in the order that they are plotted — cell_id_order_as_plotted","text":"vector cell_ids (really, whatever tip labels)","code":""},{"path":"https://molonc.github.io/dlptools/reference/check_args.html","id":null,"dir":"Reference","previous_headings":"","what":"confirms arguments are compatible for the plotting wrapper — check_args","title":"confirms arguments are compatible for the plotting wrapper — check_args","text":"confirms arguments compatible plotting wrapper","code":""},{"path":"https://molonc.github.io/dlptools/reference/check_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"confirms arguments are compatible for the plotting wrapper — check_args","text":"","code":"check_args()"},{"path":"https://molonc.github.io/dlptools/reference/check_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"confirms arguments are compatible for the plotting wrapper — check_args","text":"plot_state_hm args","code":""},{"path":"https://molonc.github.io/dlptools/reference/chr_name_check.html","id":null,"dir":"Reference","previous_headings":"","what":"internal for checking the names of chromosome columns in a dataframe. — chr_name_check","title":"internal for checking the names of chromosome columns in a dataframe. — chr_name_check","text":"used error catching.","code":""},{"path":"https://molonc.github.io/dlptools/reference/chr_name_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"internal for checking the names of chromosome columns in a dataframe. — chr_name_check","text":"","code":"chr_name_check(df, exp_chr_name)"},{"path":"https://molonc.github.io/dlptools/reference/chr_name_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"internal for checking the names of chromosome columns in a dataframe. — chr_name_check","text":"df dataframe manipulated function exp_chr_name string chromosome column name function expecting see.","code":""},{"path":"https://molonc.github.io/dlptools/reference/chr_name_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"internal for checking the names of chromosome columns in a dataframe. — chr_name_check","text":"bool TRUE good, FALSE message otherwise.","code":""},{"path":"https://molonc.github.io/dlptools/reference/convert_long_reads_to_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"convert long format reads to wide format — convert_long_reads_to_wide","title":"convert long format reads to wide format — convert_long_reads_to_wide","text":"common manipulation reads files various analyses reshape long format reads data (row 500kb bin state values cell) wide format, chr_start_end rows cell_id columns.","code":""},{"path":"https://molonc.github.io/dlptools/reference/convert_long_reads_to_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert long format reads to wide format — convert_long_reads_to_wide","text":"","code":"convert_long_reads_to_wide(reads_df, state_col = \"state\")"},{"path":"https://molonc.github.io/dlptools/reference/convert_long_reads_to_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert long format reads to wide format — convert_long_reads_to_wide","text":"reads_df reads table convert.","code":""},{"path":"https://molonc.github.io/dlptools/reference/convert_long_reads_to_wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert long format reads to wide format — convert_long_reads_to_wide","text":"wide format table","code":""},{"path":"https://molonc.github.io/dlptools/reference/convert_long_reads_to_wide.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"convert long format reads to wide format — convert_long_reads_to_wide","text":"minimal required columns input : chr,start,end,cell_id,state","code":""},{"path":"https://molonc.github.io/dlptools/reference/create_chromosome_column_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"create a sorted factor vector of chromosomes — create_chromosome_column_fct","title":"create a sorted factor vector of chromosomes — create_chromosome_column_fct","text":"mostly just splitting states heatmap chromosome. naturally sorted.","code":""},{"path":"https://molonc.github.io/dlptools/reference/create_chromosome_column_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a sorted factor vector of chromosomes — create_chromosome_column_fct","text":"","code":"create_chromosome_column_fct(states_mat)"},{"path":"https://molonc.github.io/dlptools/reference/create_chromosome_column_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a sorted factor vector of chromosomes — create_chromosome_column_fct","text":"states_mat matrix cell_id named rows bin (chr_start_end) columns","code":""},{"path":"https://molonc.github.io/dlptools/reference/create_chromosome_column_fct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a sorted factor vector of chromosomes — create_chromosome_column_fct","text":"factor chromosomes sorted levels","code":""},{"path":"https://molonc.github.io/dlptools/reference/factor_column_mixedsort.html","id":null,"dir":"Reference","previous_headings":"","what":"naturally sort a column from a dataframe. — factor_column_mixedsort","title":"naturally sort a column from a dataframe. — factor_column_mixedsort","text":"Common plotting issue, used mixed sort things like, e.g., chromosomes get sorted properly chr1, chr2, ..., chr10","code":""},{"path":"https://molonc.github.io/dlptools/reference/factor_column_mixedsort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"naturally sort a column from a dataframe. — factor_column_mixedsort","text":"","code":"factor_column_mixedsort(df, col)"},{"path":"https://molonc.github.io/dlptools/reference/factor_column_mixedsort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"naturally sort a column from a dataframe. — factor_column_mixedsort","text":"df dataframe contains column sort col column sort","code":""},{"path":"https://molonc.github.io/dlptools/reference/factor_column_mixedsort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"naturally sort a column from a dataframe. — factor_column_mixedsort","text":"factor column sorted levels","code":""},{"path":"https://molonc.github.io/dlptools/reference/fetch_continuous_color_ramp.html","id":null,"dir":"Reference","previous_headings":"","what":"internal function for setting up heatmap continuous range colors chooses defaults, unless overwritten by user. — fetch_continuous_color_ramp","title":"internal function for setting up heatmap continuous range colors chooses defaults, unless overwritten by user. — fetch_continuous_color_ramp","text":"internal function setting heatmap continuous range colors chooses defaults, unless overwritten user.","code":""},{"path":"https://molonc.github.io/dlptools/reference/fetch_continuous_color_ramp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"internal function for setting up heatmap continuous range colors chooses defaults, unless overwritten by user. — fetch_continuous_color_ramp","text":"","code":"fetch_continuous_color_ramp(   plotting_values,   custom_continuous_colors = NULL,   custom_continuous_range = NULL )"},{"path":"https://molonc.github.io/dlptools/reference/fetch_heatmap_color_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"grab colors for various hm possibilities. — fetch_heatmap_color_palette","title":"grab colors for various hm possibilities. — fetch_heatmap_color_palette","text":"Standard colors used Signals people DLP world.","code":""},{"path":"https://molonc.github.io/dlptools/reference/fetch_heatmap_color_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"grab colors for various hm possibilities. — fetch_heatmap_color_palette","text":"","code":"fetch_heatmap_color_palette(   state_col,   states_df,   continuous = FALSE,   max_colors = 20,   custom_continuous_colors = NULL,   custom_continuous_range = NULL )"},{"path":"https://molonc.github.io/dlptools/reference/format_sitka_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"clean tree tip labels and drop any locus tips from sitka trees — format_sitka_tree","title":"clean tree tip labels and drop any locus tips from sitka trees — format_sitka_tree","text":"'Locus tips' sitka locus values end tip trees. Also removes \"cell_\" prefix tip labels, also consequence sitka.","code":""},{"path":"https://molonc.github.io/dlptools/reference/format_sitka_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clean tree tip labels and drop any locus tips from sitka trees — format_sitka_tree","text":"","code":"format_sitka_tree(tree)"},{"path":"https://molonc.github.io/dlptools/reference/format_sitka_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clean tree tip labels and drop any locus tips from sitka trees — format_sitka_tree","text":"tree phylo object read ape::read.tree","code":""},{"path":"https://molonc.github.io/dlptools/reference/format_sitka_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clean tree tip labels and drop any locus tips from sitka trees — format_sitka_tree","text":"phylo object cleaned \"cell_\" notation","code":""},{"path":"https://molonc.github.io/dlptools/reference/format_states_for_hm.html","id":null,"dir":"Reference","previous_headings":"","what":"format states for plotting in a heatmap — format_states_for_hm","title":"format states for plotting in a heatmap — format_states_for_hm","text":"format states plotting heatmap","code":""},{"path":"https://molonc.github.io/dlptools/reference/format_states_for_hm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"format states for plotting in a heatmap — format_states_for_hm","text":"","code":"format_states_for_hm(states_df, state_col, continuous = FALSE)"},{"path":"https://molonc.github.io/dlptools/reference/format_states_for_hm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"format states for plotting in a heatmap — format_states_for_hm","text":"states_df long format states information state_col column plotted heatmap","code":""},{"path":"https://molonc.github.io/dlptools/reference/format_states_for_hm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"format states for plotting in a heatmap — format_states_for_hm","text":"tibble (maybe just matrix ready go?)","code":""},{"path":"https://molonc.github.io/dlptools/reference/generate_hm_image.html","id":null,"dir":"Reference","previous_headings":"","what":"generate a ComplexHeatmap::Heatmap image, either to console or file. — generate_hm_image","title":"generate a ComplexHeatmap::Heatmap image, either to console or file. — generate_hm_image","text":"return image generated heatmap dump heatmap file.","code":""},{"path":"https://molonc.github.io/dlptools/reference/generate_hm_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate a ComplexHeatmap::Heatmap image, either to console or file. — generate_hm_image","text":"","code":"generate_hm_image(   hm,   file_name = NULL,   png_height = 1600,   png_width = 2800,   png_res = 144 )"},{"path":"https://molonc.github.io/dlptools/reference/generate_hm_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate a ComplexHeatmap::Heatmap image, either to console or file. — generate_hm_image","text":"file_name optional string save png image heatmap. total_hm ComplexHeatmap::Heatmap combined tree states.","code":""},{"path":"https://molonc.github.io/dlptools/reference/generate_hm_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate a ComplexHeatmap::Heatmap image, either to console or file. — generate_hm_image","text":"ComplexHeatmap::draw nothing file written.","code":""},{"path":"https://molonc.github.io/dlptools/reference/generate_state_hm.html","id":null,"dir":"Reference","previous_headings":"","what":"creates a complex heatmap of a given matrix of states. — generate_state_hm","title":"creates a complex heatmap of a given matrix of states. — generate_state_hm","text":"creates complex heatmap given matrix states.","code":""},{"path":"https://molonc.github.io/dlptools/reference/generate_state_hm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"creates a complex heatmap of a given matrix of states. — generate_state_hm","text":"","code":"generate_state_hm(   states_mat,   labels_fontsize = 8,   plot_cols = STATE_COLORS,   left_annot = NULL )"},{"path":"https://molonc.github.io/dlptools/reference/get_clone_id_label_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"get a row number of where to place each clone label. — get_clone_id_label_positions","title":"get a row number of where to place each clone label. — get_clone_id_label_positions","text":"single clone can appear multiple clades tree one monophyletic group. heatmap, need determine put clone ID label (e.g., , B, C, etc), want label cell id. Typically, label largest clade clone ID, provide legend mapping clone colors IDs. function find \"middle\" cell ID clade labelled position place clone ID.","code":""},{"path":"https://molonc.github.io/dlptools/reference/get_clone_id_label_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get a row number of where to place each clone label. — get_clone_id_label_positions","text":"","code":"get_clone_id_label_positions(clones, only_largest_clone_group = TRUE)"},{"path":"https://molonc.github.io/dlptools/reference/get_clone_id_label_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get a row number of where to place each clone label. — get_clone_id_label_positions","text":"clones table cell_id, clone_id only_largest_clone_group boolean. TRUE means largest clone clade receive clone ID label. FALSE means clades wil get clone label.","code":""},{"path":"https://molonc.github.io/dlptools/reference/get_clone_id_label_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get a row number of where to place each clone label. — get_clone_id_label_positions","text":"tibble clone_id, row_number place , ComplexHeatmap understands position place label left side annotation.","code":""},{"path":"https://molonc.github.io/dlptools/reference/get_clone_members.html","id":null,"dir":"Reference","previous_headings":"","what":"create list of list of cell_ids that belong to each clone id. — get_clone_members","title":"create list of list of cell_ids that belong to each clone id. — get_clone_members","text":"create list list cell_ids belong clone id.","code":""},{"path":"https://molonc.github.io/dlptools/reference/get_clone_members.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create list of list of cell_ids that belong to each clone id. — get_clone_members","text":"","code":"get_clone_members(clones_df)"},{"path":"https://molonc.github.io/dlptools/reference/get_clone_members.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create list of list of cell_ids that belong to each clone id. — get_clone_members","text":"clones_df tibble/df cell_id, clone_id columns","code":""},{"path":"https://molonc.github.io/dlptools/reference/get_clone_members.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create list of list of cell_ids that belong to each clone id. — get_clone_members","text":"named list lists, clone_id names","code":""},{"path":"https://molonc.github.io/dlptools/reference/get_column_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"get plotted values bounds — get_column_metrics","title":"get plotted values bounds — get_column_metrics","text":"min, max, median column generate color palette ","code":""},{"path":"https://molonc.github.io/dlptools/reference/get_column_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get plotted values bounds — get_column_metrics","text":"","code":"get_column_metrics(vals, min_max = FALSE)"},{"path":"https://molonc.github.io/dlptools/reference/import_annotations_df.html","id":null,"dir":"Reference","previous_headings":"","what":"read an annotations file (t(c)sv) — import_annotations_df","title":"read an annotations file (t(c)sv) — import_annotations_df","text":"read annotations file (t(c)sv)","code":""},{"path":"https://molonc.github.io/dlptools/reference/import_annotations_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read an annotations file (t(c)sv) — import_annotations_df","text":"","code":"import_annotations_df(annotations_file)"},{"path":"https://molonc.github.io/dlptools/reference/import_annotations_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read an annotations file (t(c)sv) — import_annotations_df","text":"annotations_file path file. Requires least sample_id column","code":""},{"path":"https://molonc.github.io/dlptools/reference/import_annotations_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read an annotations file (t(c)sv) — import_annotations_df","text":"tibble","code":""},{"path":"https://molonc.github.io/dlptools/reference/import_clones.html","id":null,"dir":"Reference","previous_headings":"","what":"read a clones t(c)sv file — import_clones","title":"read a clones t(c)sv file — import_clones","text":"read clones t(c)sv file","code":""},{"path":"https://molonc.github.io/dlptools/reference/import_clones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read a clones t(c)sv file — import_clones","text":"","code":"import_clones(clones_f)"},{"path":"https://molonc.github.io/dlptools/reference/import_clones.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read a clones t(c)sv file — import_clones","text":"clones_f path t(c)sv file cell_id clone_id columns","code":""},{"path":"https://molonc.github.io/dlptools/reference/import_clones.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read a clones t(c)sv file — import_clones","text":"tibble","code":""},{"path":"https://molonc.github.io/dlptools/reference/import_dlp_files.html","id":null,"dir":"Reference","previous_headings":"","what":"generic function to import dlp files — import_dlp_files","title":"generic function to import dlp files — import_dlp_files","text":"create dataframe files certain type. three common dlp files might want load: metrics, segments, reads.","code":""},{"path":"https://molonc.github.io/dlptools/reference/import_dlp_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generic function to import dlp files — import_dlp_files","text":"","code":"import_dlp_files(dlp_sc_dir, file_type = c(\"metrics\", \"segs\", \"reads\"))"},{"path":"https://molonc.github.io/dlptools/reference/import_dlp_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generic function to import dlp files — import_dlp_files","text":"dlp_sc_dir parent directory dlp outputs saved (see README.md expected structure) file_type options : \"metrics\", \"segs\", \"reads\"","code":""},{"path":"https://molonc.github.io/dlptools/reference/import_dlp_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generic function to import dlp files — import_dlp_files","text":"tibble information dlp outputs combined","code":""},{"path":"https://molonc.github.io/dlptools/reference/import_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"read a tree from a file in newick format — import_tree","title":"read a tree from a file in newick format — import_tree","text":"read tree file newick format","code":""},{"path":"https://molonc.github.io/dlptools/reference/import_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read a tree from a file in newick format — import_tree","text":"","code":"import_tree(tree_f)"},{"path":"https://molonc.github.io/dlptools/reference/import_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read a tree from a file in newick format — import_tree","text":"tree_f path tree file","code":""},{"path":"https://molonc.github.io/dlptools/reference/import_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read a tree from a file in newick format — import_tree","text":"phylo object","code":""},{"path":"https://molonc.github.io/dlptools/reference/load_mask_file.html","id":null,"dir":"Reference","previous_headings":"","what":"internal to control mask file loading. — load_mask_file","title":"internal to control mask file loading. — load_mask_file","text":"internal control mask file loading.","code":""},{"path":"https://molonc.github.io/dlptools/reference/load_mask_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"internal to control mask file loading. — load_mask_file","text":"","code":"load_mask_file(mask_f = NULL)"},{"path":"https://molonc.github.io/dlptools/reference/load_mask_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"internal to control mask file loading. — load_mask_file","text":"mask_f path mask file load.","code":""},{"path":"https://molonc.github.io/dlptools/reference/make_clone_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"generate a color palette for clone labels — make_clone_palette","title":"generate a color palette for clone labels — make_clone_palette","text":"generate color palette clone labels","code":""},{"path":"https://molonc.github.io/dlptools/reference/make_clone_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate a color palette for clone labels — make_clone_palette","text":"","code":"make_clone_palette(clone_ids)"},{"path":"https://molonc.github.io/dlptools/reference/make_clone_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate a color palette for clone labels — make_clone_palette","text":"clone_ids unique vector clone labels","code":""},{"path":"https://molonc.github.io/dlptools/reference/make_clone_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate a color palette for clone labels — make_clone_palette","text":"named vector hex colors, names clone labels","code":""},{"path":"https://molonc.github.io/dlptools/reference/make_corrupt_tree_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"create a complex heatmap object with a tree. — make_corrupt_tree_heatmap","title":"create a complex heatmap object with a tree. — make_corrupt_tree_heatmap","text":"Basically creates empty heatmap tree added left side annotation.","code":""},{"path":"https://molonc.github.io/dlptools/reference/make_corrupt_tree_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a complex heatmap object with a tree. — make_corrupt_tree_heatmap","text":"","code":"make_corrupt_tree_heatmap(   phylo_tree,   clones_df = NULL,   color_clones = FALSE,   clone_palette = NULL )"},{"path":"https://molonc.github.io/dlptools/reference/make_corrupt_tree_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a complex heatmap object with a tree. — make_corrupt_tree_heatmap","text":"phylo_tree phylo object tree. clones (optional) adds clones OTUs, eventually allow color","code":""},{"path":"https://molonc.github.io/dlptools/reference/make_corrupt_tree_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a complex heatmap object with a tree. — make_corrupt_tree_heatmap","text":"ComlexHeatmap heatmap object tree.","code":""},{"path":"https://molonc.github.io/dlptools/reference/make_tree_plot_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"create a ggplot object of a phylogenetic tree — make_tree_plot_obj","title":"create a ggplot object of a phylogenetic tree — make_tree_plot_obj","text":"make plot tree can added heatmap object. plot just simple tree tip labels.","code":""},{"path":"https://molonc.github.io/dlptools/reference/make_tree_plot_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a ggplot object of a phylogenetic tree — make_tree_plot_obj","text":"","code":"make_tree_plot_obj(   phylo_tree,   clones_df = NULL,   clone_palette = NULL,   color_clones = FALSE )"},{"path":"https://molonc.github.io/dlptools/reference/make_tree_plot_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a ggplot object of a phylogenetic tree — make_tree_plot_obj","text":"phylo_tree phylo object clones (optional) adds clones OTUs (TODO allow make colors)","code":""},{"path":"https://molonc.github.io/dlptools/reference/make_tree_plot_obj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a ggplot object of a phylogenetic tree — make_tree_plot_obj","text":"ggplot object","code":""},{"path":"https://molonc.github.io/dlptools/reference/mark_mask_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"add a mask column to a dataframe — mark_mask_regions","title":"add a mask column to a dataframe — mark_mask_regions","text":"Determine start–end regions segs reads dataframe overlaps regions mask file. add 'mask' boolean column dataframe indicate whether region masked.","code":""},{"path":"https://molonc.github.io/dlptools/reference/mark_mask_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add a mask column to a dataframe — mark_mask_regions","text":"","code":"mark_mask_regions(   subject_df,   mask_f = NULL,   mask_chr_name = \"seqnames\",   subject_chr_name = \"chr\" )"},{"path":"https://molonc.github.io/dlptools/reference/mark_mask_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add a mask column to a dataframe — mark_mask_regions","text":"subject_df table chromosome, start, end columns. Typically reads segs dataframe created import_dlp_files(). mask_f path mask file, see README.md ## Setup details. mask_chr_name name chromosomes column mask file. Default \"seqnames\", name provided file. subject_chr_name name chromosome column reads/segs table. Default 'chr' import scripts call column.","code":""},{"path":"https://molonc.github.io/dlptools/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://molonc.github.io/dlptools/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://molonc.github.io/dlptools/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://molonc.github.io/dlptools/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://molonc.github.io/dlptools/reference/plot_state_hm.html","id":null,"dir":"Reference","previous_headings":"","what":"main hm building function — plot_state_hm","title":"main hm building function — plot_state_hm","text":"anno_cols_list: list(Passage=c(3: #123456))","code":""},{"path":"https://molonc.github.io/dlptools/reference/plot_state_hm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"main hm building function — plot_state_hm","text":"","code":"plot_state_hm(   states_df,   state_col,   phylogeny = NULL,   anno_df = NULL,   anno_colors_list = list(),   clones_df = NULL,   anno_columns = NULL,   clone_column = NULL,   color_tree_clones = FALSE,   only_largest_clone_group = FALSE,   file_name = NULL,   labels_fontsize = 8,   continuous_hm_colours = FALSE,   custom_continuous_colors = NULL,   custom_continuous_range = NULL,   ... )"},{"path":"https://molonc.github.io/dlptools/reference/plot_state_hm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"main hm building function — plot_state_hm","text":"states_df long format read bin data plotted state_col string column name target plotting heatmap. Examples include: state, BAF, state_AS, state_phase phylogeny optional. phylo class object plotted. anno_df optional. annotations dataframe cell_id column annotation cell id added heatmap. anno_colors_list list named vectors specifying colors annotations example: list(passage=c(1='#2872bc', 19='#d23e3e')) clones_df optional. dataframe clone ideas (clone_id) cell_id. columns required. anno_columns optional. Columns containing annotation data plot. clone_column optional. Column clone id labels cells. color_tree_clones boolean. optional. Whether color tree colors clone labels. only_largest_clone_group boolean. optional. put letter label largest group given clone id. file_name name file save plot . Recommended cases plots big-ish. labels_fontsize large make text labels continuous_hm_colours plot heatmap colors continous scale. custom_continuous_colors vector 3 colors use scale plotting continuous variable, specified hexcodes. E.g., c(\"#3182BD\", \"#CCCCCC\", \"#FDCC8A\") custom_continuous_range vector values specify low, mid, high bounds continuous color scale, e.g., c(1, 5, 10)","code":""},{"path":"https://molonc.github.io/dlptools/reference/pull_chr_from_col_name.html","id":null,"dir":"Reference","previous_headings":"","what":"extract chromosome name from a bin name (chr_start_end) — pull_chr_from_col_name","title":"extract chromosome name from a bin name (chr_start_end) — pull_chr_from_col_name","text":"internal function pulling information state matrix","code":""},{"path":"https://molonc.github.io/dlptools/reference/pull_chr_from_col_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract chromosome name from a bin name (chr_start_end) — pull_chr_from_col_name","text":"","code":"pull_chr_from_col_name(col_name)"},{"path":"https://molonc.github.io/dlptools/reference/pull_chr_from_col_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract chromosome name from a bin name (chr_start_end) — pull_chr_from_col_name","text":"col_name string chr_start_end (column name internally used state dataframe)","code":""},{"path":"https://molonc.github.io/dlptools/reference/pull_chr_from_col_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract chromosome name from a bin name (chr_start_end) — pull_chr_from_col_name","text":"string chromosome","code":""},{"path":"https://molonc.github.io/dlptools/reference/pull_info_from_cell_id.html","id":null,"dir":"Reference","previous_headings":"","what":"generic extractor of info contained in cell ids — pull_info_from_cell_id","title":"generic extractor of info contained in cell ids — pull_info_from_cell_id","text":"generic extractor info contained cell ids","code":""},{"path":"https://molonc.github.io/dlptools/reference/pull_info_from_cell_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generic extractor of info contained in cell ids — pull_info_from_cell_id","text":"","code":"pull_info_from_cell_id(cell_id, library_id = FALSE, sample_id = FALSE)"},{"path":"https://molonc.github.io/dlptools/reference/pull_info_from_cell_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generic extractor of info contained in cell ids — pull_info_from_cell_id","text":"cell_id string vector cells id library_id boolean extract library IDs sample_id boolean extract sample IDs","code":""},{"path":"https://molonc.github.io/dlptools/reference/pull_info_from_cell_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generic extractor of info contained in cell ids — pull_info_from_cell_id","text":"vector requested information","code":""},{"path":"https://molonc.github.io/dlptools/reference/pull_sample_id_from_cell_id.html","id":null,"dir":"Reference","previous_headings":"","what":"extract sample ID from the typically formatted cell_ids — pull_sample_id_from_cell_id","title":"extract sample ID from the typically formatted cell_ids — pull_sample_id_from_cell_id","text":"expecting cell IDs AT21350-A143952A-R10-C37 first position sample ID.","code":""},{"path":"https://molonc.github.io/dlptools/reference/pull_sample_id_from_cell_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract sample ID from the typically formatted cell_ids — pull_sample_id_from_cell_id","text":"","code":"pull_sample_id_from_cell_id(cell_id)"},{"path":"https://molonc.github.io/dlptools/reference/pull_sample_id_from_cell_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract sample ID from the typically formatted cell_ids — pull_sample_id_from_cell_id","text":"cell_id string cell_id vector cell IDs","code":""},{"path":"https://molonc.github.io/dlptools/reference/pull_sample_id_from_cell_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract sample ID from the typically formatted cell_ids — pull_sample_id_from_cell_id","text":"string sample ID contained within","code":""},{"path":"https://molonc.github.io/dlptools/reference/reads_to_segs.html","id":null,"dir":"Reference","previous_headings":"","what":"convert reads table to segments table — reads_to_segs","title":"convert reads table to segments table — reads_to_segs","text":"Often segments file given DLP pipeline want. likely want various filtering reads level, make segments file . function take reads table covert segments table.","code":""},{"path":"https://molonc.github.io/dlptools/reference/reads_to_segs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert reads table to segments table — reads_to_segs","text":"","code":"reads_to_segs(reads_df)"},{"path":"https://molonc.github.io/dlptools/reference/reads_to_segs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert reads table to segments table — reads_to_segs","text":"reads_df table standard reads data (e.g., created import_dlp_files(file_type='reads'))","code":""},{"path":"https://molonc.github.io/dlptools/reference/reads_to_segs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert reads table to segments table — reads_to_segs","text":"tibble/dataframe read bins organized segment blocks.","code":""},{"path":"https://molonc.github.io/dlptools/reference/rle_states.html","id":null,"dir":"Reference","previous_headings":"","what":"convert states to run length encoding — rle_states","title":"convert states to run length encoding — rle_states","text":"takes vector numbers (e.g., states) returns numeric group value indicating group run value. c(5,5,5,6,6,5,5,5,2) -> 1 1 1 2 2 3 3 3 4","code":""},{"path":"https://molonc.github.io/dlptools/reference/rle_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert states to run length encoding — rle_states","text":"","code":"rle_states(states)"},{"path":"https://molonc.github.io/dlptools/reference/rle_states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert states to run length encoding — rle_states","text":"states really vector values.","code":""},{"path":"https://molonc.github.io/dlptools/reference/rle_states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert states to run length encoding — rle_states","text":"vector integers","code":""},{"path":"https://molonc.github.io/dlptools/reference/sort_df_by_cell_order.html","id":null,"dir":"Reference","previous_headings":"","what":"sort a table given a vector of cell_ids — sort_df_by_cell_order","title":"sort a table given a vector of cell_ids — sort_df_by_cell_order","text":"Typically used sort dataframe based plotted tip order align states heatmap/annotations/clone IDs plotted tree","code":""},{"path":"https://molonc.github.io/dlptools/reference/sort_df_by_cell_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sort a table given a vector of cell_ids — sort_df_by_cell_order","text":"","code":"sort_df_by_cell_order(targ_df, cell_order)"},{"path":"https://molonc.github.io/dlptools/reference/sort_df_by_cell_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sort a table given a vector of cell_ids — sort_df_by_cell_order","text":"targ_df table cell_ids sort cell_order vector cell_ids desired order (e.g., pulled ggplot tree)","code":""},{"path":"https://molonc.github.io/dlptools/reference/sort_df_by_cell_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sort a table given a vector of cell_ids — sort_df_by_cell_order","text":"table sorted","code":""}]
